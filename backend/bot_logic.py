import telebot
import os
import json
import yaml
from datetime import datetime
import time
import subprocess
import speech_recognition as sr
import logging # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logging

from db import (
    get_or_create_user,
    get_db_connection,
    update_user_info,
    update_user_state,
    update_user_timezone,
    get_user_state,
    save_msg,
    get_user_data,
    save_event,
    save_note,
    save_task,
    get_msg_history_event,
    get_msg_history_note,
    get_last_history,
    update_event,
    update_note,
    update_task,
    delete_event,
    delete_task,
    delete_note,
    get_user_events,
    get_user_task,
    get_user_notes,
    delete_note,
    delete_user_and_data
    
)
# from logger import setup_logger # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
from telebot import types
from AiRequests import request_ai
from helpers.get_system_prompt import get_system_prompt
from helpers.get_questions import get_questions
from helpers.smart_greeting import get_greeting


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logger = logging.getLogger(__name__) # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

if not os.path.exists("voices"):
    os.makedirs("voices")

QUESTIONS = get_questions(types=types)

def save_user_profile_data(user_id, field, value):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ –≤ userInfo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT userInfo FROM users WHERE talagramID = %s", (user_id,))
        result = cursor.fetchone()
        user_info = json.loads(result["userInfo"]) if result and result["userInfo"] else {}

        user_info[field] = value

        cursor.execute(
            "UPDATE users SET userInfo = %s WHERE talagramID = %s",
            (json.dumps(user_info, ensure_ascii=False), user_id),
        )
        conn.commit()
        logger.info(f"Updated profile for user {user_id}: set {field} = {value}")
    except Exception as e:
        logger.error(f"Error in save_user_profile_data for user {user_id}: {e}", exc_info=True)
        if conn: conn.rollback()
    finally:
        if cursor: cursor.close()
        if conn: conn.close()
# <<< –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò >>>


def save_answer(user_id, field, answer):
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å, –µ–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
    pass

# --- –ó–ê–ì–†–£–ó–ö–ê –¢–†–ò–ì–ì–ï–†–û–í ---
TRIGGERS = {}
try:
    current_dir = os.path.dirname(os.path.abspath(__file__))
    trigger_file_path = os.path.join(current_dir, 'triggers.yaml')
    with open(trigger_file_path, 'r', encoding='utf-8') as f:
        TRIGGERS = yaml.safe_load(f)
    logger.info("–§–∞–π–ª —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ triggers.yaml —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å triggers.yaml: {e}")

def save_answer(user_id, field, answer):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT userInfo FROM users WHERE talagramID = %s", (user_id,))
        result = cursor.fetchone()
        
        if result and result["userInfo"]:
            user_info = json.loads(result["userInfo"])
        else:
            user_info = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
        user_info[field] = answer
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É
        cursor.execute(
            "UPDATE users SET userInfo = %s WHERE talagramID = %s",
            (json.dumps(user_info), user_id),
        )
        conn.commit()
        logger.info(f"Saved answer for user {user_id}: {field} = {answer}")
    
    except Exception as e:
        logger.error(f"Error saving answer for user {user_id}: {e}")
        conn.rollback()
    
    finally:
        cursor.close()
        conn.close()

def initialize_user_info(user_id):
    for field, _, _ in QUESTIONS:
        save_answer(user_id, field, None)

def check_new_user(user):
    is_new_user = get_or_create_user(user)
    return is_new_user

def check_user_info(user):
    conn = None
    cursor = None
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT userInfo FROM users WHERE talagramID = %s", (user.id,))
        result = cursor.fetchone()
        
        if result and result["userInfo"]:
            try:
                user_info = json.loads(result["userInfo"])
                if not all(user_info.values()):
                    return {"userInfo": None, "state": get_user_state(user.id)}
                
                return {"userInfo": user_info, "state": get_user_state(user.id)}
            except json.JSONDecodeError:
                return {"userInfo": None, "state": get_user_state(user.id)}
        
        return {"userInfo": None, "state": get_user_state(user.id)}
    
    except Exception as e:
        logger.error(f"Error checking user info for user {user.id}: {e}")
        return {"userInfo": None, "state": None}
    
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def format_event_response(event_data):
    title = event_data.get('title', '‚Äî')
    
    start_date = event_data.get('start_date', 0)
    end_date = event_data.get('end_date', 0)
    notify_date = event_data.get('notify_date', 0)
    notify_before = event_data.get('notify_before', 0)
    event_type = event_data.get('event_type', 'single')

    type_text = '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ üïê' if event_type == 'single' else '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ üîÑ'

    recurrence = ''
    if event_type == 'recurring' and 'recurrence' in event_data:
        freq = event_data['recurrence'].get('frequency', '‚Äî')
        interval = event_data['recurrence'].get('interval', '‚Äî')
        recurrence = f"\nüîÅ <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:</b> {freq}, –∫–∞–∂–¥—ã–µ {interval}"

    message = (
        f"üìÖ <b>–°–æ–±—ã—Ç–∏–µ:</b> {title}\n"
        f"‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> {start_date}\n"
        f"üèÅ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_date}\n"
        f"üìÖ <b>–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:</b> {notify_date}\n"
        f"üîî <b>–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞:</b> {notify_before} –º–∏–Ω\n"
        f"üìå <b>–¢–∏–ø:</b> {type_text}{recurrence}"
    )

    return message

def format_note_response(note_data):
    title = note_data.get('title', '‚Äî')
    content = note_data.get('content', '‚Äî')

    message = (
        "üìå<b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"{title}\n\n"
        "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        f"{content}\n\n"
    )

    return message

def format_task_response(task_data):
    title = task_data.get('title', '‚Äî')
    content = task_data.get('content', '‚Äî')

    message = (
        "‚úÖ<b>–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>\n\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"{title}\n\n"
        "<b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
        f"{content}\n\n"
    )

    return message

def checkStatusUser(telegramID, bot_instance, message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—Å–µ–º.
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –ï—Å–ª–∏ –Ω–µ—Ç, get_or_create_user –≤ send_welcome –µ–≥–æ —Å–æ–∑–¥–∞—Å—Ç.
        user_data = get_user_data(telegramID)
        if user_data is None:
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ –¥–∞–ª—å—à–µ.
            return False

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å—Ç–∞—Ç—É—Å 0, –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–∞–Ω–∞.
        if user_data.get("status") == 0:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegramID} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 0, –Ω–æ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
            return False

        return False # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkStatusUser –¥–ª—è {telegramID}: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.
        bot_instance.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return True
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def handle_contextual_trigger(bot, message, trigger):
    try:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        if not user_data: return

        logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä '{trigger.get('name')}' –¥–ª—è user_id: {user_id}")
        bot.send_chat_action(message.chat.id, 'typing')

        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é —Ä–∞–±–æ—á—É—é –ø–∞–º—è—Ç—å
        all_events = get_user_events(user_data.get("id"))
        all_tasks = get_user_task(user_data.get("id"))
        all_notes = get_user_notes(user_data.get("id"))

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        special_prompt = f"""
        {trigger.get('response_prompt')}

        –í–æ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–±–æ—á–µ–π –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –°–æ–±—ã—Ç–∏—è: {json.dumps(all_events, ensure_ascii=False, default=str)}
        - –ó–∞–¥–∞—á–∏: {json.dumps(all_tasks, ensure_ascii=False, default=str)}
        - –ó–∞–º–µ—Ç–∫–∏: {json.dumps(all_notes, ensure_ascii=False, default=str)}

        –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–¥–∏–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ.
        """
        
        # 3. –í—ã–∑—ã–≤–∞–µ–º AI —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏–Ω—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ç–∞
        ai_response = request_ai(special_prompt, message.text, "context_formatter")
        
        if ai_response and ai_response.get("result") and ai_response["result"].get("text"):
            text_to_reply = ai_response["result"]["text"]
            bot.reply_to(message, text_to_reply, parse_mode='HTML')
            save_msg(user_data.get("id"), text_to_reply, True, None, None, None)
        else:
            bot.reply_to(message, "–ü–æ–Ω—è–ª —Ç–µ–±—è. –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contextual_trigger: {e}", exc_info=True)
        bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

def register_handlers(bot):

    def ask_next_question(user_id):
        try:
            state = get_user_state(user_id)
            if not state: return
            current_question = state.get("current_question", 0)
            if current_question >= len(QUESTIONS):
                complete_user_info_collection(user_id)
                return
            field, question_text, reply_markup = QUESTIONS[current_question]
            bot.send_message(state["chat_id"], question_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error sending question to user {user_id}: {e}", exc_info=True)
            update_user_state(user_id, None)

    def complete_user_info_collection(user_id):
        try:
            # –≠—Ç–∞–ø 4: –ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä–µ–ª—å—Å—ã
            bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ! –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            time.sleep(1)
            bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ–ø—Ä–æ–±—É–µ–º. –ö–∞–∫–∞—è –ø–µ—Ä–≤–∞—è –º—ã—Å–ª—å –∏–ª–∏ –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å?\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ 11:00 –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É¬ª</i> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <i>¬´–∏–¥–µ—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞¬ª</i>.", parse_mode="HTML")
            update_user_state(user_id, {'ai_request': True}) # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        except Exception as e:
            logger.error(f"Error in complete_user_info_collection for user {user_id}: {e}", exc_info=True)

    def add_event_func(user):
        update_user_state(user.id, {'ai_request': True})
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel"))
        bot.send_message(user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å...", parse_mode="HTML", reply_markup=markup)

    def add_note_func(user):
        update_user_state(user.id, {'ai_request': True})
        bot.send_message(user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏...")
        
    def handle_registered_user(message, user_info):
        # ... (–∑–¥–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ handle_registered_user –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        pass

    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        try:
            user = message.from_user
            get_or_create_user(user)
            logger.info(f"Processing /start for user: ID={user.id}, Username={user.username}")
            
            # –≠—Ç–∞–ø 1: "–†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ"
            bot.send_message(message.chat.id, 
                "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî MindMy AI, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–∞—à–∏–º ¬´–≤—Ç–æ—Ä—ã–º –º–æ–∑–≥–æ–º¬ª.\n\n"
                "–Ø –ø–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏, –ø–æ–º–Ω–∏—Ç—å –≤—Å—ë –≤–∞–∂–Ω–æ–µ –∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º."
            )
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
            
            update_user_state(user.id, {'onboarding_step': 'awaiting_name'})
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_welcome: {e}", exc_info=True)
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start.")

    @bot.message_handler(commands=['reset'])
    def reset_user_handler(message):
        try:
            user_id = message.from_user.id
            markup = types.InlineKeyboardMarkup()
            confirm_button = types.InlineKeyboardButton("–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–µ—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="confirm_reset_yes")
            cancel_button = types.InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="confirm_reset_no")
            markup.add(confirm_button, cancel_button)
            
            bot.reply_to(message, "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–µ—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å—é —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é?\n\n**–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.**", reply_markup=markup, parse_mode="HTML")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_user_handler: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞.")

    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        try:
            user = message.from_user
            user_id = user.id
            state = get_user_state(user_id)

            if checkStatusUser(user_id, bot, message): return

            # --- –õ–æ–≥–∏–∫–∞ –û–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ---
            if state and 'onboarding_step' in state:
                step = state['onboarding_step']

                if step == 'awaiting_name':
                    save_user_profile_data(user_id, 'name', message.text)
                    bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!")
                    time.sleep(0.5)
                    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: —á—Ç–æ–±—ã —è –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≥–æ—Ä–æ–¥.")
                    update_user_state(user_id, {'onboarding_step': 'awaiting_city'})
                    return

                elif step == 'awaiting_city':
                    bot.send_chat_action(user_id, 'typing')
                    ai_response = request_ai(f"–û–ø—Ä–µ–¥–µ–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA –¥–ª—è –≥–æ—Ä–æ–¥–∞: {message.text}. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–π–º–∑–æ–Ω—ã.", message.text, "timezone_detector")
                    timezone = ai_response.get("result", {}).get("text", "Error").strip()

                    if "Error" in timezone or "/" not in timezone:
                        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥.")
                        return

                    save_user_profile_data(user_id, 'timezone', timezone)
                    update_user_timezone(user_id, timezone)
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_city"))
                    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city"))
                    bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ! –Ø —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ <b>{timezone}</b>. –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç —Ç–æ—á–Ω—ã–º–∏.\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup, parse_mode="HTML")
                    update_user_state(user_id, {'onboarding_step': 'awaiting_city_confirmation'})
                    return

                elif step == 'awaiting_role':
                    save_user_profile_data(user_id, 'role_description', message.text)
                    bot.send_message(user_id, "–ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å: —Å –∫–∞–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ? (Notion, Jira, Figma –∏ —Ç.–¥.)")
                    update_user_state(user_id, {'onboarding_step': 'awaiting_tools'})
                    return

                elif step == 'awaiting_tools':
                    save_user_profile_data(user_id, 'tools', message.text)
                    bot.send_message(user_id, "–ü–æ–Ω—è–ª. –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å ¬´–∑–æ–ª–æ—Ç—ã–µ —á–∞—Å—ã¬ª –¥–ª—è —Ä–∞–±–æ—Ç—ã, –∫–æ–≥–¥–∞ –º–µ–Ω—è –ª—É—á—à–µ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å?")
                    update_user_state(user_id, {'onboarding_step': 'awaiting_focus_hours'})
                    return

                elif step == 'awaiting_focus_hours':
                    save_user_profile_data(user_id, 'focus_hours', message.text)
                    complete_user_info_collection(user_id)
                    return
                
            # --- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
            user_info_check = check_user_info(user)
            if user_info_check and user_info_check.get("userInfo"):
                handle_registered_user(message, user_info_check.get("userInfo"))
            else:
                 send_welcome(message)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_all_messages: {e}", exc_info=True)

    @bot.callback_query_handler(func=lambda call: True)
    def handle_query(call):
        try:
            user_id = call.from_user.id
            
            if call.data == "confirm_city":
                bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ, —Å –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏!", call.message.chat.id, call.message.message_id)
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º", callback_data="start_advanced_onboarding"))
                markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞—á–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="skip_advanced_onboarding"))
                bot.send_message(call.message.chat.id, "–ú—ã –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º. –ù–æ –µ—Å–ª–∏ –≤—ã —É–¥–µ–ª–∏—Ç–µ –µ—â—ë 60 —Å–µ–∫—É–Ω–¥, —è —Å–º–æ–≥—É —Å—Ç–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ. –•–æ—Ç–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è –ø–æ–¥ —Å–µ–±—è?", reply_markup=markup)
                update_user_state(user_id, {'onboarding_step': 'awaiting_advanced_choice'})

            elif call.data == "change_city":
                 bot.edit_message_text("–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑.", call.message.chat.id, call.message.message_id)
                 update_user_state(user_id, {'onboarding_step': 'awaiting_city'})
            
            elif call.data == "start_advanced_onboarding":
                bot.edit_message_text("–°—É–ø–µ—Ä! –ö—Ä–∞—Ç–∫–æ, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–ª –≤–∞—à–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:", call.message.chat.id, call.message.message_id)
                time.sleep(0.5)
                bot.send_message(user_id, "1. –í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫).")
                update_user_state(user_id, {'onboarding_step': 'awaiting_role'})

            elif call.data == "skip_advanced_onboarding":
                bot.edit_message_text("–ü–æ–Ω—è–ª –≤–∞—Å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.", call.message.chat.id, call.message.message_id)
                complete_user_info_collection(user_id)
            
            elif call.data == "confirm_reset_yes":
                if delete_user_and_data(user_id):
                    bot.edit_message_text("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å.", call.message.chat.id, call.message.message_id)
                else:
                    bot.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.", call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id)

            elif call.data == "confirm_reset_no":
                bot.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id)
            
            # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–≤–æ–∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_query: {e}", exc_info=True)
            bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def complete_user_info_collection(bot, user_id):
        update_user_state(user_id, None)
        try:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"))
            web_app = types.WebAppInfo("https://mindmyai.ru/")
            markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app))
            bot.send_message(
                user_id,
                "üéâ –°–ø–∞—Å–∏–±–æ! –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. \n\n" \
                "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"Error sending completion message to user {user_id}: {e}")
        logger.info(f"User info completed for user ID: {user_id}")

    @bot.message_handler(func=lambda message: True)
    def handle_all_messages(message):
        try:
            user = message.from_user
            user_id = user.id
            if checkStatusUser(user_id, bot, message): return
            
            logger.info(f"Message from {user_id} ({user.username}): {message.text}")
            
            # --- –õ–û–ì–ò–ö–ê –î–ò–°–ü–ï–¢–ß–ï–†–ê –¢–†–ò–ì–ì–ï–†–û–í ---
            user_message_lower = message.text.lower()
            triggered = False
            if 'triggers' in TRIGGERS:
                for trigger in TRIGGERS.get('triggers', []):
                    for pattern in trigger.get('patterns', []):
                        if pattern in user_message_lower:
                            # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            handle_contextual_trigger(bot, message, trigger)
                            triggered = True
                            break
                    if triggered: break
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏–¥–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
            if not triggered:
                user_info_check = check_user_info(user)
                if user_info_check is None:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
                    return

                state = user_info_check.get("state")
                user_info = user_info_check.get("userInfo")

                if state and state.get("ai_request") is None:
                    handle_questionnaire_flow(bot, message, user_id, state)
                    return

                if user_info is None:
                    suggest_questionnaire_start(message, user)
                    return
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å AI
                handle_registered_user(message, user_info)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_all_messages –¥–ª—è user {message.from_user.id}: {e}", exc_info=True)

    def suggest_questionnaire_start(bot, message, user):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="start_questionnaire"))
        
        bot.send_message(
            chat_id=message.chat.id,
            text=f"{user.first_name}, —è –≤–∏–∂—É, —á—Ç–æ –≤—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –≤–∞–º –ø–æ–º–æ–≥–∞—Ç—å!",
            reply_markup=markup,
        )

    def handle_questionnaire_flow(bot, message, user_id, state):
        current_question = state.get("current_question", 0)
        if current_question < len(QUESTIONS):
            field, _, reply_markup = QUESTIONS[current_question]
            save_answer(user_id, field, message.text)

            if current_question == 6:
                ai_response = request_ai("–ü—Ä–∏—à–ª–∏ –≤ –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ timezone –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA –Ω–∞ 2025 –≥–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–æ–¥–µ Europe/Yekaterinburg.–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: Asia/Yekaterinburg, Europe/Moscow, America/New_York.", message.text, "default")
                if ai_response and "result" in ai_response:
                    result = ai_response['result']['text']
                    update_user_timezone(user_id, result)
            
            if reply_markup:
                bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!", reply_markup=types.ReplyKeyboardRemove())
            
            new_state = {
                "current_question": current_question + 1,
                "chat_id": message.chat.id,
            }
            update_user_state(user_id, new_state)
            ask_next_question(bot, user_id)

    def handle_registered_user(message, user_info):
        talagramID = message.from_user.id
        if checkStatusUser(talagramID, bot, message):
            return
        user_data = get_user_data(talagramID)
        name = user_info.get("name", message.from_user.first_name)
        state = get_user_state(talagramID)
        if state is None:
            state = {}
            update_user_state(talagramID, state)
        system_prompt = get_system_prompt(user_data, state)
        checkAiRequest = state.get("ai_request", None)
        if checkAiRequest:
            history_records = get_last_history(user_data["id"])
            history_records_arr = []
            if history_records:
                for record in history_records:
                    history_records_arr.append({
                        "role": "assistant" if record["is_bot"] else "user",
                        "content": record["msg"]
                    })
                
            msg_history = history_records_arr
            save_msg(user_data["id"], message.text, False, None, None, None)
        
            ai_response = request_ai(system_prompt, message.text, "default", msg_history=msg_history)
            if ai_response and "result" in ai_response:
                try:
                    if ai_response['result']['type'] == 'function_call':
                        if ai_response['result']['name'] == 'create_event':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['reminders']:
                                event_data = save_event(user_data["id"])
                                update_success = update_event(event_data["id"], event)
                                if update_success:
                                         bot.reply_to(message, format_event_response(event), parse_mode="HTML")
                                         save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, event_data["id"], None, None)
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                        elif ai_response['result']['name'] == 'update_event':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['reminders']:
                                update_success = update_event(event.get('id'), event)
                                if update_success:
                                         bot.reply_to(message, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: \n\n{format_event_response(event)}", parse_mode="HTML")
                                         save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, event.get('id'), None, None)
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
                        elif ai_response['result']['name'] == 'remove_event':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['reminders']:
                                update_success = delete_event(event.get('id'))
                                bot.reply_to(message, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", parse_mode="HTML")
                                save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, event.get('id'), None, None)
                        elif ai_response['result']['name'] == 'create_task':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['tasks']:
                                task_data = save_task(user_data["id"])
                                update_success = update_task(task_id=task_data["id"], task_data=event)
                                if update_success:
                                    bot.reply_to(message, format_task_response(event), parse_mode="HTML")
                                    save_msg(user_data["id"], json.dumps(result_data, ensure_ascii=False), True, None, task_data["id"], None)
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                        elif ai_response['result']['name'] == 'update_task':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['tasks']:
                                update_success = update_task(task_id=event.get('id'), task_data=event)
                                if update_success:
                                    bot.reply_to(message, f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \n\n{format_task_response(event)}", parse_mode="HTML")
                                    save_msg(user_data["id"], json.dumps(result_data, ensure_ascii=False), True, None, event.get('id'), None)
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                        elif ai_response['result']['name'] == 'remove_task':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['tasks']:
                                update_success = delete_task(event.get('id'))
                                bot.reply_to(message, "‚ùå –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
                                save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, event.get('id'), None, None)
                        elif ai_response['result']['name'] == 'create_note':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['notes']:
                                note_data = save_note(user_data["id"])
                                update_success = update_note(note_id=note_data["id"], note_data=event)
                                if update_success:
                                    bot.reply_to(message, format_note_response(event), parse_mode="HTML")
                                    save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, None, None, note_data["id"])
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.")
                        elif ai_response['result']['name'] == 'update_note':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['notes']:
                                update_success = update_note(note_id=event.get('id'), note_data=event)
                                if update_success:
                                    bot.reply_to(message, format_note_response(event), parse_mode="HTML")
                                    save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, None, None, event.get('id'))
                                else:
                                    bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.")
                        elif ai_response['result']['name'] == 'remove_note':
                            result_data = json.loads(ai_response['result']['args'])
                            for event in result_data['notes']:
                                update_success = delete_note(event.get('id'))
                                bot.reply_to(message, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")
                                save_msg(user_data["id"], json.dumps(event, ensure_ascii=False), True, event.get('id'), None, None)
                    else:
                        save_msg(user_data["id"], f"{ai_response['result']['text']}", True, None, None, None)
                        bot.reply_to(message, ai_response['result']['text'], parse_mode=None)
                except json.JSONDecodeError:
                    bot.reply_to(message, f"{ai_response['result']}")
                    save_msg(user_data["id"], f"{ai_response['result']}", True, None, None, None)
            else:
                bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                save_msg(user_data["id"], "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", True, None, None, None)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"))
            web_app = types.WebAppInfo("https://mindmyai.ru/")
            markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app))
            bot.reply_to(
                message,
                f"{name}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                reply_markup=markup,
            )
            save_msg(user_data["id"], f"{name}, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", True, None, None, None)
            update_user_state(talagramID, {'ai_request': True})

    @bot.callback_query_handler(func=lambda call: call.data == "start_questionnaire")
    def start_questionnaire(call):
        user = call.from_user
        initialize_user_info(user.id)
        update_user_state(user.id, {"current_question": 0, "chat_id": call.message.chat.id})
        ask_next_question(bot, user.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{user.first_name}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!",
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("rm_evnt_"))
    def handle_delete_event(call):
        try:
            event_id = int(call.data.split("_")[2])
            user = call.from_user

            delete_event(event_id)
            bot.answer_callback_query(call.id, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."
            )

        except Exception as e:
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            logger.error(f"Error remove event {event_id} to user {user.id}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancel"))
    def cancel(call):
        try:
            user = call.from_user
            update_user_state(user.id, {'ai_request': True})
            bot.answer_callback_query(call.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–î–µ–π—Ç—Å–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"
            )

        except Exception as e:
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
            logger.error(f"Error cancel action to user {user.id}: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == "add_event")
    def add_event(call):
        bot.answer_callback_query(call.id)
        user = call.from_user
        add_event_func(user)

    def add_event_func(user):
        user_data = get_user_data(user.id)
        update_user_state(user.id, {'ai_request': True})
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel"))
        bot.send_message(
            user.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:\n\n"
            
            "üìÖ <b>–î–∞—Ç–∞</b> —Å–æ–±—ã—Ç–∏—è: –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ?\n"
            "üïó <b>–í—Ä–µ–º—è</b>: –≤–æ —Å–∫–æ–ª—å–∫–æ?\n"
            "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>: –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π –≤–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å?\n"
            "üîÅ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å</b>: —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è? "
            "–ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ç.–ø.)\n\n"
            
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 —É –º–µ–Ω—è –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π. –ù–∞–ø–æ–º–Ω–∏ –∑–∞ 15 –º–∏–Ω—É—Ç. –≠—Ç–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
            parse_mode="HTML",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "add_note")
    def add_note(call):
        bot.answer_callback_query(call.id)
        user = call.from_user
        add_event_func(user)

    def add_note_func(user):
        user_data = get_user_data(user.id)
        update_user_state(user.id, {'ai_request': True})
        bot.send_message(
            user.id,
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏. "
            "–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —Ç–µ–≥–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫: –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n"
            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
            "–û–±–æ–∏\n"
            "–ö–ª–µ–π\n"
            "–ü–ª–∏—Ç–∫–∞\n"
            "–¢–µ–≥–∏: #—Ä–µ–º–æ–Ω—Ç"
        )

    @bot.callback_query_handler(func=lambda call: True)
    def handle_query(call):
        user_id = call.from_user.id
        state = get_user_state(user_id)
        
        if state and 'current_question' in state:
            current_question = state['current_question']
            field, _, _ = QUESTIONS[current_question]

            save_answer(user_id, field, call.data)

            new_state = {
                "current_question": current_question + 1,
                "chat_id": call.message.chat.id,
            }
            update_user_state(user_id, new_state)
            ask_next_question(bot, user_id)

            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )

    def convert_ogg_to_wav(input_path, output_path):
        command = ['ffmpeg', '-i', input_path, output_path]
        subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    
    def recognize_speech(wav_path):
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio = recognizer.record(source)
        try:
            return recognizer.recognize_google(audio, language="ru-RU")
        except sr.UnknownValueError:
            return None
        except sr.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None

    @bot.message_handler(content_types=['voice'])
    def handle_voice_message(message):
        user = message.from_user
        if checkStatusUser(user.id, bot, message):
            return
        user_id = user.id
        logger.info(f"Voice message from {user_id} ({user.username})")
        ogg_path = wav_path = None
        try:
            file_info = bot.get_file(message.voice.file_id)
            file_path = file_info.file_path
            file = bot.download_file(file_path)

            ogg_path = f"voices/{user_id}_{int(time.time())}.ogg"
            with open(ogg_path, 'wb') as f:
                f.write(file)

            wav_path = ogg_path.replace('.ogg', '.wav')
            convert_ogg_to_wav(ogg_path, wav_path)

            text = recognize_speech(wav_path)

            state = get_user_state(user_id)
            if state is None:
                update_user_state(user_id, {'ai_request': True})

            
            if text:
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {text}")
                message.text = text
                handle_all_messages(message)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

        finally:
            for path in [ogg_path, wav_path]:
                if path and os.path.exists(path):
                    try:
                        os.remove(path)
                        logger.info(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {path}")
                    except Exception as del_err:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {del_err}")